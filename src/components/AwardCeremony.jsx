import React, { useEffect, useState, useMemo } from "react";
import { motion } from "framer-motion";
import confetti from "canvas-confetti";
import lightImg from "../assets/light.png";
import bronzeImg from "../assets/bronze.svg";
import silverImg from "../assets/silver.svg";
import goldImg from "../assets/gold.svg";
import emptyImg from "../assets/empty.svg";
import WinnerAskIcon from "../icons/winnerask.svg?react";
import { theme } from "../theme";
import PrimaryButton from "./PrimaryButton";

/**
 * winners: –º–∞—Å—Å–∏–≤ —Ç–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç:
 *  { name: string, emoji: string, score: number }
 *  –ü–æ—Ä—è–¥–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º ‚Äî –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∞–º —É–ø–æ—Ä—è–¥–æ—á–∏—Ç –∏—Ö –∫–∞–∫:
 *   0: –±—Ä–æ–Ω–∑–∞ (3-–µ –º–µ—Å—Ç–æ), 1: —Å–µ—Ä–µ–±—Ä–æ (2-–µ), 2: –∑–æ–ª–æ—Ç–æ (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å)
 */
export default function AwardCeremony({ winners = [], onFinish }) {
    // –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º: –±—Ä–æ–Ω–∑–∞ ‚Üí —Å–µ—Ä–µ–±—Ä–æ ‚Üí –∑–æ–ª–æ—Ç–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –æ—á–∫–æ–≤
    const ordered = useMemo(() => {
        const copy = [...winners];
        copy.sort((a, b) => (a?.score ?? 0) - (b?.score ?? 0));
        return copy.slice(0, 3);
    }, [winners]);

    const texts = ["3-–µ –º–µ—Å—Ç–æ", "2-–µ –º–µ—Å—Ç–æ", "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å"];
    const medals = [bronzeImg, silverImg, goldImg];

    const [step, setStep] = useState(0); // 0=bronze,1=silver,2=gold
    const [emojiRevealed, setEmojiRevealed] = useState(false);
    const [moving, setMoving] = useState(false);
    const [placed, setPlaced] = useState([]); // –∫–∞–∫–∏–µ —Å–ª–æ—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã (–∏–Ω–¥–µ–∫—Å—ã 0..2)

    const currentWinner = ordered[step];

    // üîÑ –≤—Ä–∞—â–µ–Ω–∏–µ light.png
    const lightAnimation = {
        rotate: 360,
        transition: { repeat: Infinity, duration: 20, ease: "linear" },
    };

    // ‚öôÔ∏è —Ç—Ä—è—Å–∫–∞ –º–µ–¥–∞–ª–∏ –∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ª–æ—è
    const shakeAnimation = {
        rotate: [-3, 3, -3],
        transition: { repeat: Infinity, duration: 0.4, ease: "easeInOut" },
    };

    // –ø–æ—è–≤–ª–µ–Ω–∏–µ emoji -> —Ö–∞–ø—Ç–∏–∫ + –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    useEffect(() => {
        if (!emojiRevealed) return;
        const levels = ["medium", "heavy", "rigid"];
        window.Telegram?.WebApp?.HapticFeedback?.impactOccurred(levels[step]);

        const power = [80, 150, 300][step];
        const spread = [60, 90, 120][step];
        confetti({ particleCount: power, spread, origin: { y: 0.6 } });
    }, [emojiRevealed, step]);

    // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ reveal emoji
    useEffect(() => {
        setEmojiRevealed(false);
        const t = setTimeout(() => setEmojiRevealed(true), 1500);
        return () => clearTimeout(t);
    }, [step]);

    const handleContinue = () => {
        if (moving) return;
        setMoving(true);

        // –∏–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é ¬´—É–ª—ë—Ç–∞¬ª –≤ –ª–µ–≤—ã–π/—Ü–µ–Ω—Ç—Ä/–ø—Ä–∞–≤—ã–π slot
        setTimeout(() => {
            setPlaced((p) => [...p, step]);
            setMoving(false);
            setEmojiRevealed(false);

            if (step < 2) {
                setStep((s) => s + 1);
            } else {
                onFinish?.();
            }
        }, 1200);
    };

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            style={overlayStyle}
        >
            {/* –§–æ–Ω: —Å–≤–µ—Ç—è—â–µ–µ—Å—è –∫–æ–ª–µ—Å–æ */}
            <motion.img
                src={lightImg}
                alt="light"
                style={lightStyle}
                animate={lightAnimation}
                initial={{ opacity: 0 }}
                transition={{ duration: 0.8 }}
            />

            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞: –º–µ–¥–∞–ª—å + —Å–ª–æ–π (winnerask/emoji) */}
            <motion.div
                key={step}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5 }}
                style={centerWrapper}
            >
                <motion.img
                    src={medals[step]}
                    alt="medal"
                    style={medalStyle}
                    animate={shakeAnimation}
                />

                <motion.div style={winnerContainer} animate={shakeAnimation}>
                    {!emojiRevealed ? (
                        <WinnerAskIcon style={{ width: 96, height: 96 }} />
                    ) : (
                        <motion.span
                            style={emojiStyle}
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ type: "spring", stiffness: 200 }}
                        >
                            {currentWinner?.emoji || "üôÇ"}
                        </motion.span>
                    )}
                </motion.div>
            </motion.div>

            {/* –ü–æ–¥–ø–∏—Å–∏ –ø–æ–¥ —Å—Ü–µ–Ω–æ–π:
          –¥–æ emoji: —Ç–µ–∫—Å—Ç –º–µ—Å—Ç–∞ (3-–µ/2-–µ/–ü–æ–±–µ–¥–∏—Ç–µ–ª—å),
          –ø–æ—Å–ª–µ emoji: –∏–º—è (36 bold) –∏ –æ—á–∫–∏ –Ω–∞ 4px –Ω–∏–∂–µ (24 bold) */}
            <div style={{ marginTop: 32, textAlign: "center", zIndex: 3 }}>
                {!emojiRevealed ? (
                    <div style={placeText}>{texts[step]}</div>
                ) : (
                    <>
                        <div style={nameText}>{currentWinner?.name || "–ò–≥—Ä–æ–∫"}</div>
                        <div style={scoreText}>
                            {(currentWinner?.score ?? 0)} –æ—á–∫–æ–≤
                        </div>
                    </>
                )}
            </div>

            {/* –†—è–¥ –∏–∑ —Ç—Ä—ë—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π (–Ω–∞ 24px –≤—ã—à–µ –∫–Ω–æ–ø–∫–∏) */}
            <div style={slotsContainer}>
                {[0, 1, 2].map((i) => (
                    <div key={i} style={slotWrapper}>
                        {placed.includes(i) ? (
                            <>
                                <motion.img
                                    src={medals[i]}
                                    alt="medal-mini"
                                    style={slotMedalStyle}
                                    animate={{ rotate: [0, 10, -10, 0] }}
                                    transition={{ duration: 0.6 }}
                                />
                                <motion.span
                                    style={emojiSmall}
                                    animate={{ scale: [1, 1.15, 1] }}
                                    transition={{ duration: 0.4 }}
                                >
                                    {ordered[i]?.emoji || "üôÇ"}
                                </motion.span>
                            </>
                        ) : (
                            <img src={emptyImg} alt="empty" style={slotEmptyStyle} />
                        )}
                    </div>
                ))}
            </div>

            {/* –ù–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞ */}
            <div style={buttonWrapper}>
                <PrimaryButton textColor={theme.icotex.white} onClick={handleContinue}>
                    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                </PrimaryButton>
            </div>
        </motion.div>
    );
}

/* ===== –°–¢–ò–õ–ò ===== */
const overlayStyle = {
    position: "fixed",
    top: 0,
    left: 0,
    width: "100vw",
    height: "100vh",
    backgroundColor: "var(--surface-main)",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    overflow: "hidden",
};

const lightStyle = {
    width: 326,
    height: 326,
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    opacity: 0.9,
    zIndex: 0,
};

const centerWrapper = {
    position: "relative",
    zIndex: 2,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: 200,
    height: 200,
};

const medalStyle = {
    width: 135,
    height: 182,
    position: "absolute",
    zIndex: 1,
};

const winnerContainer = {
    position: "absolute",
    zIndex: 2,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: 135,
    height: 182,
};

const emojiStyle = {
    fontSize: 96,
};

const placeText = {
    fontFamily: "Gilroy, sans-serif",
    fontWeight: 700,
    fontSize: 24,
    color: "var(--icotex-white)",
};

const nameText = {
    fontFamily: "Gilroy, sans-serif",
    fontWeight: 700,
    fontSize: 36,                 // ‚úÖ 36 bold
    color: "var(--icotex-white)", // ‚úÖ icotex/white
    lineHeight: 1.1,
};

const scoreText = {
    marginTop: 4,                 // ‚úÖ –Ω–∞ 4px –Ω–∏–∂–µ
    fontFamily: "Gilroy, sans-serif",
    fontWeight: 700,
    fontSize: 24,                 // ‚úÖ 24 bold
    color: "var(--icotex-white)", // ‚úÖ icotex/white
};

const slotsContainer = {
    display: "flex",
    justifyContent: "center",
    alignItems: "flex-end",
    gap: 24,          // ‚úÖ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 24px –º–µ–∂–¥—É —Å–ª–æ—Ç–∞–º–∏
    marginTop: 24,    // ‚úÖ –±–ª–æ–∫ –Ω–∞ 24px –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π (—Å–º. buttonWrapper marginTop)
};

const slotWrapper = {
    position: "relative",
    width: 88,        // ‚úÖ —Ä–∞–∑–º–µ—Ä —Å–ª–æ—Ç–æ–≤ 88x119
    height: 119,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
};

const slotEmptyStyle = {
    width: 88,
    height: 119,
    opacity: 0.9,
};

const slotMedalStyle = {
    width: 88,
    height: 119,
    position: "absolute",
};

const emojiSmall = {
    position: "absolute",
    fontSize: 48,
};

const buttonWrapper = {
    marginTop: 24, // —Å–ª–æ—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π —Ä–æ–≤–Ω–æ –Ω–∞ 24px
    zIndex: 10,
};
